/* Auto-generated by genmsg_cpp for file /home/georg/Software/ROS/ethzasl_sensor_fusion/ssf_core/msg/ext_ekf.msg */
#ifndef SSF_CORE_MESSAGE_EXT_EKF_H
#define SSF_CORE_MESSAGE_EXT_EKF_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "geometry_msgs/Vector3.h"
#include "geometry_msgs/Vector3.h"

namespace ssf_core
{
template <class ContainerAllocator>
struct ext_ekf_ {
  typedef ext_ekf_<ContainerAllocator> Type;

  ext_ekf_()
  : header()
  , angular_velocity()
  , linear_acceleration()
  , state()
  , flag(0)
  {
  }

  ext_ekf_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , angular_velocity(_alloc)
  , linear_acceleration(_alloc)
  , state(_alloc)
  , flag(0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _angular_velocity_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  angular_velocity;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _linear_acceleration_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  linear_acceleration;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _state_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  state;

  typedef int32_t _flag_type;
  int32_t flag;

  enum { ignore_state = 0 };
  enum { current_state = 1 };
  enum { initialization = 2 };
  enum { state_correction = 3 };

  typedef boost::shared_ptr< ::ssf_core::ext_ekf_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ssf_core::ext_ekf_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ext_ekf
typedef  ::ssf_core::ext_ekf_<std::allocator<void> > ext_ekf;

typedef boost::shared_ptr< ::ssf_core::ext_ekf> ext_ekfPtr;
typedef boost::shared_ptr< ::ssf_core::ext_ekf const> ext_ekfConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ssf_core::ext_ekf_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ssf_core::ext_ekf_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ssf_core

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ssf_core::ext_ekf_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ssf_core::ext_ekf_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ssf_core::ext_ekf_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0710aec5a114bc946c3d7687c8e5a0bd";
  }

  static const char* value(const  ::ssf_core::ext_ekf_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0710aec5a114bc94ULL;
  static const uint64_t static_value2 = 0x6c3d7687c8e5a0bdULL;
};

template<class ContainerAllocator>
struct DataType< ::ssf_core::ext_ekf_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ssf_core/ext_ekf";
  }

  static const char* value(const  ::ssf_core::ext_ekf_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ssf_core::ext_ekf_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
geometry_msgs/Vector3       angular_velocity\n\
geometry_msgs/Vector3       linear_acceleration\n\
float32[]                   state\n\
int32                       flag\n\
\n\
uint32                      ignore_state = 0\n\
uint32                      current_state = 1\n\
uint32                      initialization = 2\n\
uint32                      state_correction = 3\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::ssf_core::ext_ekf_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::ssf_core::ext_ekf_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::ssf_core::ext_ekf_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ssf_core::ext_ekf_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.angular_velocity);
    stream.next(m.linear_acceleration);
    stream.next(m.state);
    stream.next(m.flag);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ext_ekf_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ssf_core::ext_ekf_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ssf_core::ext_ekf_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "angular_velocity: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.angular_velocity);
    s << indent << "linear_acceleration: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.linear_acceleration);
    s << indent << "state[]" << std::endl;
    for (size_t i = 0; i < v.state.size(); ++i)
    {
      s << indent << "  state[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.state[i]);
    }
    s << indent << "flag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.flag);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SSF_CORE_MESSAGE_EXT_EKF_H

